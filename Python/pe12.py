"""
http://projecteuler.net/index.php?section=problems&id=12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from pe5 import factorize, prod

def num_divisors(n) :
    f = factorize(n)
    return prod( e+1 for e in f.values() )

def triangles() :
    s = i = 0
    while True :
        i += 1
        s += i
        yield s

def first( pred, seq ):
    for s in seq :
        if pred(s) :
            return s

#s = first( lambda x : num_divisors(x) > 500, triangles() )

# can we do faster?
from pe10 import primes
from math import ceil, log
from collections import defaultdict
from itertools import takewhile

# the highest number of primes we can have is log(500,2), to get 500 divisors
def first_n_primes(n) :
    return [ p for i,p in takewhile( lambda ip : ip[0] < n, enumerate(primes()) ) ]

# prime factors with sieve
def prime_factors2(n, primes) :
    primes = iter(primes)
    f = primes.next()
    while n >= f > 1 :
        if n % f == 0 :
           yield f
           n /= f
        else :
            f = primes.next()

#list of prime factors to dict of prime and exponent
def factorize2( pf ) : 
    f = defaultdict(int)
    for p in pf :
        f[p] += 1
    return f

def num_divisors2( factors ) :
    return prod( e+1 for e in factors.values() )

primes = first_n_primes( int(ceil(log(500,2))) )

num_div = lambda n : num_divisors2( factorize2( prime_factors2( n, primes ) ) )

s = first( lambda x : num_div(x) > 500, triangles() )

assert s == 76576500
