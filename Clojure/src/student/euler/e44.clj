(ns student.euler.e44)

(comment "
Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, 
for which their sum and difference is pentagonal and D = |Pk - Pj| is minimised; 
what is the value of D?
")

(defn pentagonal [n]
  (/ (* n (- (* 3 n) 1)) 2))

(defn pentagonals []
  (map pentagonal (iterate inc 1)))


(assert (= (take 10 (pentagonals)) '(1, 5, 12, 22, 35, 51, 70, 92, 117, 145,)))


; D = P(n+1) - P(n) = 3*n+1, monoton growing, so the first pair we find will be the last

(defn pentagonal? [p]
  (= p (last (take-while #(<= % p) (pentagonals)))))


(defn pent? [p]
  "3n^2-n-2p=0 -> good if the solution is integer"
  (zero? (rem (+ 1 (Math/sqrt (+ 1 (* 24 p)))) 6)))


(defn find-pentagonal []
  (let [all-ps (pentagonals)]
    (loop [[a & ps] all-ps]
      (let
        [pairs (for [b (take-while #(< % a) all-ps)
                     :when (pent? (+ a b))  
                     :when (pent? (- a b))]
                 [a b])]
        (if (not (empty? pairs))
          (first pairs)
          (recur ps))))))


(defn find-pentagonal2 []
  (let [all-ps (pentagonals)]
    (loop [[d & ps] all-ps ; loop till d in a < b < c < d -> c = a + b; d = b + c; b = d-c; a = 2c-d
           ps-set #{}] ; maintain set of pentagonals for fast lookup
      (let
        [pairs (for [c (take-while #(< % d) all-ps)
                     :when (every? ps-set [(- d c) (- (* 2 c) d)])]
                 [c (- d c)])]
        (if (not (empty? pairs))
          (first pairs)
          (recur ps (conj ps-set d)))))))
        

(defn e44 []
  (apply - (find-pentagonal)))

(assert (= 5482660 (e44)))